Origin: upstream, commit:1cf3237fbcb6cdd9b53511fc2d7a57c16866da9a
Author: AntonioBL <antonio.lotti@alice.it>
Description: change default pdf dpi export to rendering value

--- a/libmscore/textbase.cpp
+++ b/libmscore/textbase.cpp
@@ -529,20 +529,16 @@ void TextFragment::draw(QPainter* p, con
             // in Qt 5.12.x this workaround should be no more necessary if
             // env variable QT_MAX_CACHED_GLYPH_SIZE is set to 1
             p->save();
-            qreal deviceLogicalDpi = (p->device()->logicalDpiX() + p->device()->logicalDpiY()) / 2.0;
-            QScreen* screen = QGuiApplication::primaryScreen();
-            qreal screenDpi = screen->logicalDotsPerInch();
             qreal dx = p->worldTransform().dx();
             qreal dy = p->worldTransform().dy();
             // diagonal elements will now be changed to 1.0
             p->setMatrix(QMatrix(1.0, 0.0, 0.0, 1.0, dx, dy));
             // correction factor for bold text drawing, due to the change of the diagonal elements
             qreal factor = 1.0 / mm;
-            QFont fold(f);
-            f.setPointSizeF(f.pointSizeF() / factor * deviceLogicalDpi / screenDpi);
-            QRawFont fRaw = QRawFont::fromFont(f);
-            QTextLayout textLayout(text);
-            textLayout.setFont(fold);
+            QFont fnew(f, p->device());
+            fnew.setPointSizeF(f.pointSizeF() / factor);
+            QRawFont fRaw = QRawFont::fromFont(fnew);
+            QTextLayout textLayout(text, f, p->device());
             textLayout.beginLayout();
             while (true) {
                   QTextLine line = textLayout.createLine();
@@ -556,7 +552,7 @@ void TextFragment::draw(QPainter* p, con
             qreal offset = 0;
             // glyphrun drawing has an offset equal to the max ascent of the text fragment
             for (int i = 0; i < glyphruns.length(); i++) {
-                  qreal value = glyphruns.at(i).rawFont().ascent() / factor * deviceLogicalDpi / screenDpi;
+                  qreal value = glyphruns.at(i).rawFont().ascent() / factor;
                   if (value > offset)
                         offset = value;
                   }
@@ -565,15 +561,15 @@ void TextFragment::draw(QPainter* p, con
                   QVector<QPointF> positions2;
                   // calculate the new positions for the scaled geometry
                   for (int j = 0; j < positions1.length(); j++) {
-                        QPointF punto = positions1.at(j) / factor * deviceLogicalDpi / screenDpi;
-                        positions2.append(punto);
+                        QPointF newPoint = positions1.at(j) / factor;
+                        positions2.append(newPoint);
                         }
                   QGlyphRun glyphrun2 = glyphruns.at(i);
                   glyphrun2.setPositions(positions2);
                   // change the glyphs with the correct glyphs
                   // and account for glyph substitution
-                  if (glyphrun2.rawFont().familyName() != f.family()) {
-                        QFont f2(f);
+                  if (glyphrun2.rawFont().familyName() != fnew.family()) {
+                        QFont f2(fnew);
                         f2.setFamily(glyphrun2.rawFont().familyName());
                         glyphrun2.setRawFont(QRawFont::fromFont(f2));
                         }
--- a/mscore/preferences.cpp
+++ b/mscore/preferences.cpp
@@ -102,7 +102,7 @@ void Preferences::init(bool storeInMemor
             {PREF_EXPORT_MP3_BITRATE,                              new IntPreference(128, false)},
             {PREF_EXPORT_MUSICXML_EXPORTBREAKS,                    new EnumPreference(QVariant::fromValue(MusicxmlExportBreaks::ALL), false)},
             {PREF_EXPORT_MUSICXML_EXPORTLAYOUT,                    new BoolPreference(true, false)},
-            {PREF_EXPORT_PDF_DPI,                                  new IntPreference(300, false)},
+            {PREF_EXPORT_PDF_DPI,                                  new IntPreference(DPI, false)},
             {PREF_EXPORT_PNG_RESOLUTION,                           new DoublePreference(300.0, false)},
             {PREF_EXPORT_PNG_USETRANSPARENCY,                      new BoolPreference(true, false)},
             {PREF_IMPORT_GUITARPRO_CHARSET,                        new StringPreference("UTF-8", false)},
